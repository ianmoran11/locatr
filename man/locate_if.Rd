% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/locate.R
\name{locate_if}
\alias{locate_if}
\title{Conditionally adds direction annotations to tidyxl data frame}
\usage{
locate_if(cells, ..., direction, name, values = NULL,
  types = data_type, formatters = list(), drop_na = TRUE)
}
\arguments{
\item{cells}{a tidyxl data frame}

\item{...}{expression to filter for headers}

\item{direction}{direction of new headers}

\item{name}{of variable associated with header}

\item{values}{values}

\item{types}{types}

\item{formatters}{formatters}

\item{drop_na}{drop_na}
}
\description{
This function conditionally adds direction annations to tidyxl data frame. The resulting data frame will contain the following columns: \code{.value}, \code{.direction}, and \code{.header_label}.
These columns indicate the value, direction and name of the header columns that will be produced in the tidy data frame produced by \code{migrate}.

The header cells for which annotations are the outermost.
For example, if "left" of "W" is used for the direction argument, cells furthest to the left in your spreadsheet will have location information added.

The \code{...} arguments take explressions that identify which cells we have annotations added.
}
\examples{

library(tidyverse)

# Read in a formatted tidyxl data frame.

xl_df <-
 unpivotr_example("worked-examples.xlsx") \%>\%
 xlsx_cells_fmt(sheets = "pivot-hierarchy")

# Add a column indicate the leveling of indenting for each cell and locate data cell.
xl_df <-
 xl_df \%>\%
  append_fmt(fmt_alignment_indent) \%>\%
  locate_data(data_type == "numeric")


# Add annotations for header cells. First for header cells to the left of the table with no indenting, and then for cells for one level of indenting.
xl_df <-
 xl_df \%>\%
  locate_if(fmt_alignment_indent == 0, direction = "WNW", name = subject_type) \%>\%
  locate_if(fmt_alignment_indent == 1, direction = "W", name = subject) \%>\%
  locate(direction = "N", name = student)

# Use `migrate` to reshape the data frame such that each data cells has its own row and each header variable has its own column.
 xl_df \%>\% migrate()
}
